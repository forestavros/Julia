using Plots

y0 = 100.0; #Αρχικό μήκος επέκτασης του ελατηρίου, από το σημείο ισορροπίας του συστήματος
k1 = 1;     # Σταθερά ελατηρίου
k2 = 0.1;   # Αρχική τιμή σταθεράς του αποσβεστήρα. (Αυξάνεται κατά 0.1, για n διαφορετικά σενάρια ευαισθησίας ως προς την Κ2)
M = 1;      # Μάζα σώματος
h = 0.1;    # Διακριτό υπολογιστικό βήμα χρόνου 
m = 1500;   # Αριθμός γραμμών των πινάκων (χρόνος προσομοίωσης)
n = 5;      # Αριθμός στηλών των πινάκων (σενάρια ευαισθησίας ως προς την Κ2)


# Για τον προσδιορισμό των ποσοτήτων y(t) και y'(t) γίνεται χρήση αναπτυγμάτων σειρών Taylor, ενώ οι σχέσεις που δίνουν 
# την 3η και 4η παράγωγο, προκύπτουν από την αρχική σχέση F = mγ. Πρόκειται για διαφορική εξίσωση 2ης τάξης που έχει την
# μορφή: y''(t) = -(k1/M)*y(t) - k2*y(t)
# Από την παραγώγιση της παραπάνω σχέσης προκύπτουν οι παράγωγοι 3ης και 4ης τάξης που απαιτούνται στα αναπτύγματα των 
# χρησιμοποιούμενων σειρών Taylor.

yr = zeros(m,n);     # Πίνακας αποθήκευσης διανυσμάτων πλάτους ταλάντωσης του σώματος για κάθε μια από τις n εναλλακτικές Κ2
ydev = zeros(m,n);   # Πίνακας πρώτης παραγώγου του μεγέθους y(t) για κάθε μια από τις n εναλλακτικές Κ2
ydev2 = zeros(m,n);  # Πίνακας δεύτερης παραγώγου του μεγέθους y(t) για κάθε μια από τις n εναλλακτικές Κ2
ydev3 = zeros(m,n);  # Πίνακας τρίτης παραγώγου του μεγέθους y(t) για κάθε μια από τις n εναλλακτικές Κ2
ydev4 = zeros(m,n);  # Πίνακας τρίτης παραγώγου του μεγέθους y(t) για κάθε μια από τις n εναλλακτικές Κ2


# Αρχικοποίηση τιμών των πινάκων για t = 1
yr[1,:] .=  100.0;
ydev[1,:] .= 0.0;
ydev2[1,:] .= 0.0;
ydev3[1,:] .= 0.0;
ydev4[1,:] .= 0.0;

for j in 1:n

    for i in 2:m

        ydev2[i-1,j] = -(k1/M)*yr[i-1,j] - k2*ydev[i-1,j];

        ydev3[i-1,j] = -(k1/M)*ydev[i-1,j] - k2*ydev2[i-1,j];

        ydev4[i-1,j] = -(k1/M)*ydev2[i-1,j] - k2*ydev3[i-1,j];

        yr[i,j] = yr[i-1,j] + h*ydev[i-1,j] + ((h^2)/factorial(2))*ydev2[i-1,j] + ((h^3)/factorial(3))*ydev2[i-1,j] + ((h^n)/factorial(n))*ydev4[i-1,j];

        ydev[i,j] = ydev[i-1,j] + h*ydev2[i-1,j] + ((h^2)/factorial(2))*ydev3[i-1,j] + ((h^3)/factorial(2))*ydev4[i-1,j]

    end

        global  k2 = k2+0.1;

        
end

    plotlyjs(size = (1000,700))

        x = 1: 1: m;
        
        plot(x, yr, lw = 1.5)

#gr()

 #plotlyjs(size = (1000,700))

#x = 1: 1: m;

#plot(x, yr, label = ["K2 = 0.1" "K2 = 0.2" "K2 = 0.3" "K2 = 0.n"], lw = 1.5)
#plot!(x, yr[:,2])
#plot!(x, yr[:,3])
#plot!(x, yr[:,n])
